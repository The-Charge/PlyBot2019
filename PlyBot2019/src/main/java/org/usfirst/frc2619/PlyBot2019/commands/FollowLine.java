// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2619.PlyBot2019.Robot;
import org.usfirst.frc2619.PlyBot2019.subsystems.SensorBar;

/**
 *
 */
public class FollowLine extends Command {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public int counter;
    public double leftSpeed;
    public double rightSpeed;
    public int activeSensor;

    public FollowLine() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
        counter = 0;
        activeSensor = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.setPercentVBus();
        //Robot.sensorBar.FollowTheLine();
        leftSpeed = 0;
        rightSpeed = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        counter++;

        boolean farleft = Robot.sensorBar.sensorFarLeft.get(); //1
        boolean left = Robot.sensorBar.sensorLeft.get(); //2
        boolean middle = Robot.sensorBar.sensorMiddle.get(); //3
        boolean right = Robot.sensorBar.sensorRight.get(); //4
        boolean farright = Robot.sensorBar.sensorFarRight.get(); //5

        //boolean farleft = SmartDashboard.getBoolean("FarLeft", true);
        //boolean left = SmartDashboard.getBoolean("Left", false);
        //boolean middle = SmartDashboard.getBoolean("Middle", false);
        //boolean right = SmartDashboard.getBoolean("Right", false);
        //boolean farright = SmartDashboard.getBoolean("FarRight", false);

        boolean nextsensor = false;
        if (activeSensor == 1 && left) nextsensor = true;
        if (activeSensor == 2 && middle) nextsensor = true;
        //if (activeSensor == 3 && left) nextsensor = true;
        if (activeSensor == 4 && middle) nextsensor = true;
        if (activeSensor == 5 && right) nextsensor = true;
        
        if (counter >= 40 || counter == 1 || nextsensor)
        {
        if (farleft) //move right more
        {
            activeSensor = 1;
            leftSpeed = 1;
            rightSpeed = -1;
        }
        else if (left) //move right less
        {
            activeSensor = 2;
            leftSpeed = 0.5;
            rightSpeed = -0.5;
        }
        else if (right) //move left less
        {
            activeSensor = 4;
            leftSpeed = -0.5;
            rightSpeed = 0.5;
        }
        else if (farright) //move right more
        {
            activeSensor = 5;
            leftSpeed = -1;
            rightSpeed = 1;
        }
        else if (middle) //lock staright
        {
            activeSensor = 3;
            leftSpeed = 1;
            rightSpeed = 1;
            end();
        }
        else //do nothing
        {
            SmartDashboard.putString("Line Follow: ", "COULD NOT FIND LINE");
            leftSpeed = 0.5;
            rightSpeed = 0.5;
        }
    }
        Robot.driveTrain.initSpeedMode();    
        Robot.driveTrain.setIndivSpeedPID(leftSpeed, rightSpeed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    	Robot.driveTrain.setPercentVBus();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
