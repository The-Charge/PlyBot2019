// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2619.PlyBot2019.Robot;
import org.usfirst.frc2619.PlyBot2019.subsystems.SensorBar;

/**
 *
 */
public class FollowLine extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FollowLine() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        //Robot.sensorBar.FollowTheLine();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        boolean farleft = Robot.sensorBar.sensorFarLeft.get();
        boolean left = Robot.sensorBar.sensorLeft.get();
        boolean middle = Robot.sensorBar.sensorMiddle.get();
        boolean right = Robot.sensorBar.sensorRight.get();
        boolean farright = Robot.sensorBar.sensorFarRight.get();
        double leftSpeed;
        double rightSpeed;
        if (farleft) //move right more
        {
            leftSpeed = -0.5;
            rightSpeed = 1;
        }
        else if (left) //move right less
        {
            leftSpeed = 0;
            rightSpeed = 0.5;
        }
        else if (right) //move left less
        {
            leftSpeed = 0.5;
            rightSpeed = 0;
        }
        else if (farright) //move right more
        {
            leftSpeed = 1;
            rightSpeed = -0.5;
        }
        else if (middle) //lock staright
        {
            leftSpeed = 1;
            rightSpeed = 1;
        }
        else //do nothing
        {
            SmartDashboard.putString("Line Follow: ", "COULD NOT FIND LINE");
            leftSpeed = 0.5;
            rightSpeed = 0.5;
        }
        Robot.driveTrain.initSpeedMode();    
        Robot.driveTrain.setIndivSpeedPID(leftSpeed, rightSpeed);

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
