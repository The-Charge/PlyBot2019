// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2619.PlyBot2019.MathUtil;
import org.usfirst.frc2619.PlyBot2019.Robot;

/**
 *
 */
public class ClaytonDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ClaytonDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.setPercentVBus();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double forward, turn, leftSpeed, rightSpeed;
    	forward = -MathUtil.adjSpeed(Robot.oi.leftJoystick.getY());
    	turn = -MathUtil.adjSpeed(Robot.oi.leftJoystick.getZ());
    	if (forward > 0.0) {
            if (turn > 0.0) {
              leftSpeed = forward - turn;
              rightSpeed = Math.max(forward, turn);
            } 
            else {
              leftSpeed = Math.max(forward, -turn);
              rightSpeed = forward + turn;
            }
        } 
        else {
            turn = -turn;
            if (turn > 0.0) {
              rightSpeed = -Math.max(-forward, turn);
              leftSpeed = forward + turn;
            } 
            else {
              rightSpeed = forward - turn;
              leftSpeed = -Math.max(-forward, -turn);
            }
        }
        Robot.driveTrain.run(leftSpeed, rightSpeed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    	Robot.driveTrain.setPercentVBus();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
