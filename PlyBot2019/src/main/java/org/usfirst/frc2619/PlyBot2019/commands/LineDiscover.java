// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019.commands;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2619.PlyBot2019.Robot;

/**
 *
 */
public class LineDiscover extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    public DigitalInput[] sensArray; //One array to hold the sensors in this command
    public int state; //Remembers what state the robot searching is in.

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LineDiscover() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        sensArray = new DigitalInput[5];
        for (int senspace = 0; senspace < 5; senspace++){ // Loading in all sensors into array seperate from sensorBar
            sensArray[senspace] = Robot.sensorBar.getSensor(senspace);
        }
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        state = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        boolean[] sensbool = new boolean[5]; //Var to hold boolean values and be easily changed

        for (int x = 0; x < 5; x++){ //Get boolean values from digital input sensors
            if(x == 1 || x == 2 || x == 3)
                sensbool[x] = sensArray[x].get();
            else{
                sensbool[x] = false; //FOR TESTING ONLY!!!
                //sensbool[x] = !sensArray[x].get();
            }
        }
        if(state == 0){

        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
