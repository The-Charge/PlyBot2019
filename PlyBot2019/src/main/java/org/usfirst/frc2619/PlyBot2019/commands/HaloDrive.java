// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2619.PlyBot2019.MathUtil;
import org.usfirst.frc2619.PlyBot2019.Robot;

/**
 *
 */
public class HaloDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HaloDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        Robot.driveTrain.setPercentVBus();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double leftInput, rightInput;
        leftInput = Robot.oi.leftJoystick.getY();
        rightInput =  Robot.oi.rightJoystick.getX();
        leftInput = MathUtil.adjSpeed(leftInput);
        rightInput = MathUtil.adjSpeed(rightInput);

        double leftMotorOutput = 0, rightMotorOutput = 0;
        if(leftInput != 0 && rightInput == 0)
        {
            leftMotorOutput = leftInput;
            rightMotorOutput = leftInput;
        }
        else if(leftInput == 0 && rightInput != 0)
        {
            if(rightInput > 0)
            {
                leftMotorOutput = rightInput;
                rightMotorOutput = -rightInput;
            }
            else if(rightInput < 0)
            {
                leftMotorOutput = -rightInput;
                rightMotorOutput = rightInput;
            }
        }
        else
        {
            leftInput = leftInput/2;
            rightInput = rightInput/2;
            leftMotorOutput = leftInput;
            rightMotorOutput = leftInput + rightInput;
        }
        Robot.driveTrain.run(leftMotorOutput, rightMotorOutput);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    	Robot.driveTrain.setPercentVBus();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
