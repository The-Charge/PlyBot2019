// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2619.PlyBot2019.MathUtil;
import org.usfirst.frc2619.PlyBot2019.Robot;
import org.usfirst.frc2619.PlyBot2019.subsystems.DriveTrain;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class ToggleLockStraightGyro extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    //private final WPI_TalonSRX leftFrontMotor = Robot.driveTrain.LeftFrontMotor;
	//private final WPI_TalonSRX rightFrontMotor = DriveTrain.RightFrontMotor;
	// private final double ERROR = 2;
    // private final double MULTIPLIER = 0.1;

	private double previousAngleAdjustment;
	private double error;
	private double leftSpeed;
	private double rightSpeed;
	private double currentAngle;
    private double setPoint;
    private double avSpeed;
    private double adjustment;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ToggleLockStraightGyro() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        //Robot.driveTrain.driveLocked = true;
        previousAngleAdjustment = DriveTrain.getAngAdjusment();
    	Robot.driveTrain.setAngAdjusment(0.0);
        setPoint = DriveTrain.getAngle();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        //double correction;
    	
    	currentAngle = DriveTrain.getAngle();
    	error = setPoint - currentAngle;
    	
    	leftSpeed = -Robot.oi.leftJoystick.getY();
        rightSpeed = -Robot.oi.rightJoystick.getY();
        avSpeed = (leftSpeed + rightSpeed) / 2.0;
    	
    	SmartDashboard.putNumber("Current Angle", currentAngle);
    	SmartDashboard.putNumber("Setpoint", setPoint);
    	SmartDashboard.putNumber("Error", error);
    	SmartDashboard.putNumber("Left Motor Speed", leftSpeed);
    	SmartDashboard.putNumber("Right Motor Speed", rightSpeed);

        adjustment = MathUtil.lerp(error, -20, 20) * 2 - 1;
        
        Robot.driveTrain.run(MathUtil.Clamp(avSpeed + adjustment, -1, 1), MathUtil.Clamp(avSpeed - adjustment, -1, 1));

    	// if (Math.abs(error) < ERROR)
    	// 	error = 0;
		// correction = error*MULTIPLIER;
    	
    	// if (error != 0) {
    	// 	if (error > 0)
    	// 		Robot.driveTrain.run(leftSpeed, leftSpeed-correction);
    	// 	else
    	// 		Robot.driveTrain.run(-(rightSpeed-correction), rightSpeed); //Why is there an extra negative here?
    	// }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if(Math.abs(error) > 20)
            return true;
        else
            return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.setAngAdjusment(previousAngleAdjustment);
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
