// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2619.PlyBot2019;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoMode;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.networktables.NetworkTableValue;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc2619.PlyBot2019.commands.*;
import org.usfirst.frc2619.PlyBot2019.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    /*
    private static final int CAM_WIDTH = 320;
    private static final int CAM_HEIGHT = 240;
    private static final int CAM_FPS = 60;
    */
    
    private static final int BAUD_RATE = 115200;
    private static final SerialPort.Port SERIAL_PORT = SerialPort.Port.kUSB;

    public static SerialPort visionPort = null;
    public static int loopCount = 0;

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        //Create a SerialPort object to communicate with the Jevois vision camera
        try {
            System.out.println("Creating Jevois SerialPort...");
            visionPort = new SerialPort(BAUD_RATE, SERIAL_PORT);
            System.out.println("Successfully created SerialPort");
        } catch (Exception e) {
            System.out.println("Failed to create Jevois SerialPort.");
            e.printStackTrace();
        }

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        // test connection to the vision camera
        this.pingSerial();

        autonomousCommand = chooser.getSelected();

        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        // read information from the vision camera
        this.readSerial();

        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // test connection to the vision camera
        this.pingSerial();

        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        // read information from the vision camera
        this.readSerial();

        Scheduler.getInstance().run();
    }

    /**
     * This function sends a string to the SerialPort camera and returns the number of bytes successfully written
     * Uses code from Team 2073 EagleForce, billbo911 on Chief Delphi
     */
    private void pingSerial() {
        if (visionPort == null)
            return;

        System.out.println("pinging JeVois");
        String cmd = "ping";
        int bytes = visionPort.writeString(cmd);

        System.out.println("wrote " +  bytes + "/" + cmd.length() + " bytes, cmd: " + cmd);
    }

    /**
     * This function counts the loops until it receives bytes from the SerialPort
     * Uses code from Team 2073 EagleForce, billbo911 on Chief Delphi
     */
    private void readSerial() {
        String serialInfo = "";
        if (visionPort == null) {
            System.out.println("SerialPort is not valid");
            return;
        }

        System.out.println("Serial info: \"" + visionPort.readString() + "\", " + visionPort.getBytesReceived() + " bytes received.");

        if (visionPort.getBytesReceived() > 0) {
            serialInfo = visionPort.readString();

            System.out.println("Success, waited: " + loopCount + " loops, Rcv'd: " + serialInfo);
            loopCount = 0;
        } else {
            System.out.println("Waiting for " + loopCount + " loops");
            loopCount++;
        }
    }
    
}
